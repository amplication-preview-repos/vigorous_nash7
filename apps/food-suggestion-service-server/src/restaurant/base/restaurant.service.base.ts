/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Restaurant as PrismaRestaurant } from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class RestaurantServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.RestaurantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restaurant.count(args);
  }

  async restaurants(
    args: Prisma.RestaurantFindManyArgs
  ): Promise<PrismaRestaurant[]> {
    return this.prisma.restaurant.findMany(args);
  }
  async restaurant(
    args: Prisma.RestaurantFindUniqueArgs
  ): Promise<PrismaRestaurant | null> {
    return this.prisma.restaurant.findUnique(args);
  }
  async createRestaurant(
    args: Prisma.RestaurantCreateArgs
  ): Promise<PrismaRestaurant> {
    return this.prisma.restaurant.create(args);
  }
  async updateRestaurant(
    args: Prisma.RestaurantUpdateArgs
  ): Promise<PrismaRestaurant> {
    return this.prisma.restaurant.update(args);
  }
  async deleteRestaurant(
    args: Prisma.RestaurantDeleteArgs
  ): Promise<PrismaRestaurant> {
    return this.prisma.restaurant.delete(args);
  }

  async uploadPhotos<T extends Prisma.RestaurantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaRestaurant> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "photos";
    const photos = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.restaurant.update({
      where: args.where,

      data: {
        photos: photos as InputJsonValue,
      },
    });
  }

  async downloadPhotos<T extends Prisma.RestaurantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantFindUniqueArgs>
  ): Promise<FileDownload> {
    const { photos } = await this.prisma.restaurant.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      photos as unknown as LocalStorageFile
    );
  }

  async deletePhotos<T extends Prisma.RestaurantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantFindUniqueArgs>
  ): Promise<PrismaRestaurant> {
    const { photos } = await this.prisma.restaurant.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      photos as unknown as LocalStorageFile
    );

    return await this.prisma.restaurant.update({
      where: args.where,

      data: {
        photos: Prisma.DbNull,
      },
    });
  }
}
